"use strict";(self.webpackChunktodoapp=self.webpackChunktodoapp||[]).push([[792],{208:(e,t,n)=>{n.d(t,{A:()=>d});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,':root {\n  --font-color: #0c0a09;\n  --font-color-grey: #aaa;\n  --border-color: #222;\n  --primary-background: #fca5a5;\n  --background-light: #fef2f2;\n  --background-grey: #e7e5e4;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml {\n  font-size: 62.5%;\n  line-height: 1.6;\n}\n\nbody {\n  font-size: 1.6rem;\n  color: var(--font-color);\n  background-attachment: fixed;\n  background-size: cover;\n}\n\nheader {\n  font-size: 2.4rem;\n}\n\nh1,\nh2,\nh3 {\n  line-height: 1.2;\n}\n\na {\n  text-decoration: none;\n  color: var(--font-color);\n}\n\nimg {\n  display: block;\n  width: 100%;\n}\n\nbutton {\n  font-family: inherit;\n  color: inherit;\n  cursor: pointer;\n  border-style: none;\n  outline: none;\n}\n\n/* container */\n.container {\n  height: 100vh;\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: auto 1fr;\n}\n\n/* header */\n.header {\n  grid-column: 1/3;\n  grid-row: 1;\n  background-color: var(--primary-background);\n  border-bottom: 1px solid #d3d3d3;\n  padding: 15px;\n  color: white;\n  display: flex;\n}\n\n.header #notepad-icon {\n  height: 2.4em;\n  width: 2.4em;\n  margin-left: 0;\n}\n\n/* side bar */\n.side-bar, \n.dialog-side-bar {\n  grid-column: 1/2;\n  background-color: var(--background-grey);\n  border-right: 1px solid #d3d3d3;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 45px;\n  gap: 10px;\n}\n\n.dialog-side-bar button{\n  background: var(--background-grey);\n  font-size: 20px;\n  /* padding-left: 10%; */\n}\n\n.side-bar button, \n.dialog-side-bar button {\n  display: flex;\n  flex-direction: row-reverse;\n  transition: transform 0.3s ease-in-out;\n}\n\n.side-bar button:hover, \n.dialog-side-bar button:hover {\n  transform: translateX(10px);\n  font-weight: bold;\n}\n\n.side-bar button .icon-img {\n  height: 30px;\n  width: 30px;\n}\n\n.date-container {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  width: 75%;\n}\n\n.counter {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 25px; /* Set to your desired size */\n  height: 25px; /* Set to your desired size */\n  margin-left: auto;\n  background-color: var(--primary-background);\n  border: 1px solid var(--primary-background);\n  border-radius: 50%;\n  color: white;\n  padding: 0; /* Remove padding to ensure the circle shape */\n  font-weight: bold;\n}\n\n.dialog-side-bar button .icon-img{\n  height: 25px;\n  width: 30px;\n}\n\n#form-dialog .dialog-container .dialog-content input[type=\'date\']{\n  color: green;\n  border:1px solid green;\n}\n\nform input#date{\n  color: green;\n  border:1px solid green;\n}\n\ninput[type="date"]::-webkit-calendar-picker-indicator {\n  filter: invert(26%) sepia(98%) saturate(1284%) hue-rotate(93deg) brightness(97%) contrast(107%);\n  /* Add other styling properties here as needed */\n}\n.date,\n.topic {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 10px;\n  width: 100%;\n}\n\n.topic {\n  margin-left: 10px;\n}\n\n.side-bar button {\n  font-size: 2.5rem;\n  background-color: var(--background-grey);\n}\n\n#add-button {\n  margin-top: auto;\n  width: 25%;\n}\n\n/* ADD modal */\ndialog {\n  width: 500px;\n  height: 325px;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  /* padding: 20px; */\n  border: none;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.dialog-container {\n  width: 500px;\n  height: 325px;\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: auto 1fr;\n}\n\n.dialog-header {\n  display: flex;\n  grid-column: 1/3;\n  grid-row: 1;\n  background-color: var(--primary-background);\n  padding: 10px;\n}\n\n.dialog-header #exit-button{\n  margin-left: auto;\n  background: var(--primary-background);\n}\n\n.dialog-side-bar {\n  grid-column: 1/2;\n  background-color: var(--background-grey);\n  border-right: 1px solid black;\n  padding: 10px;\n}\n\n.dialog-content button,\n.submit-button,\n#cancel-button {\n  font-size: 12px;\n  border: 1px solid green;\n  background-color: white;\n  padding: 5px;\n  border-radius: 10%;\n  color: green;\n  transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition for background color and text color */\n}\n\n.dialog-content button:hover {\n  color: white;\n  background-color: green;\n}\n\n\n\n.edit img:hover,\n.remove img:hover{\n  filter: invert(18%) sepia(97%) saturate(4130%) hue-rotate(110deg) brightness(97%) contrast(103%);\n}\n.dialog-content,\n#edit-dialog {\n  grid-column: 2/3;\n  padding: 10px;\n  height: fit-content;\n}\n\n#edit-dialog{\n  height: fit-content;\n}\n\n#desc,\n#title,\n#bottom-line {\n  width: 95%;\n  border-radius: 10px;\n}\n\n#desc,\n#title {\n  border: none;\n  outline: none;\n  padding: 5px;\n}\n\n#desc {\n  height: 150px;\n}\n\n#bottom-line {\n  display: flex;\n  justify-content: flex-start;\n}\n\n#bottom-line .submit-button,\n#bottom-line #cancel-button {\n  margin-left: auto;\n}\n\ntextarea {\n  resize: none;\n}\n\n#form-priority {\n  display: flex;\n  gap: 10px;\n}\n\n/* Hide default radio buttons */\n#form-priority input[type="radio"] {\n  /* display: none; */\n}\n\n/* Style for labels */\n#form-priority label {\n  font-size: 12px;\n  display: inline-block;\n  padding: 2px 2px;\n  border: 1px solid #000000;\n  border-radius: 4px;\n  background-color: #ffffff;\n  color: #000000;\n  cursor: pointer;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n/* Style for checked labels */\n/* #form-priority input[type="radio"]:checked + label {\n  background-color: #000000;\n  color: #ffffff;\n} */\n\n/* Style for hovered labels */\n\n#form-priority .radio-label#Low:hover{\n  background-color: green;\n  color: white;\n}\n\n/* Specific styles for each priority level */\n\n/* High priority */\n#form-priority #High {\n  border-color: red;\n  color: red;\n}\n\n#form-priority input[type="radio"]#High:checked + label {\n  background-color: red;\n  color: #ffffff;\n}\n\n#form-priority .radio-label#High:hover {\n  background-color: red;\n  color: #ffffff;\n}\n\n/* Medium priority */\n#form-priority #Medium {\n  border-color: orange;\n  color: orange;\n}\n\n#form-priority input[type="radio"]#Medium:checked + label{\n  background-color: orange;\n  color: #ffffff;\n}\n\n#form-priority .radio-label#Medium:hover {\n  background-color: orange;\n  color: #ffffff;\n}\n\n/* Low priority */\n#form-priority #Low {\n  border-color: green;\n  color: green;\n}\n\n#form-priority input[type="radio"]#Low:checked + label {\n  background-color: green;\n  color: #ffffff;\n}\n\n/* Detail Dialog */\n#detail-dialog {\n  padding: 10px;\n  background-color: var(--background-grey);\n  height: fit-content;\n}\n/* content */\n#content {\n  background: #fef2f2;\n  grid-column: 2/3;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-rows: 1fr;\n  font-size: 16px;\n  gap: 10px;\n  margin: 25px;\n}\n\n/* todo div stack */\n.grid {\n  display: flex;\n  justify-content: flex-end;\n  gap: 10px;\n  background-color: var(--background-grey);\n  border-left-color: green;\n  border-radius: 5px;\n  border: 1px solid #d3d3d3;\n  border-left: 5px solid;\n  padding: 5px;\n  transition: box-shadow 0.3s ease; /* Smooth transition */\n}\n\n.grid:hover {\n  box-shadow: 5px 10px 30px #847f7f;\n}\n\n.grid button {\n  background-color: var(--background-grey);\n}\n\n.detail {\n  border: 1px solid green;\n  padding: 5px;\n  border-radius: 5px;\n  color: green;\n  transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition for background color and text color */\n}\n\n.detail:hover {\n  color: white;\n  background-color: green;\n}\n\n#_title {\n  margin-right: auto;\n}\n\n#_dueDate {\n  display: flex;\n  justify-content: center;\n  width: 70px;\n}\n\n\n.grid img {\n  width: 20px;\n  height: 20px;\n  align-self: center;\n}\n\n#add-button-img {\n  width: 100%;\n  background-color: var(--primary-background);\n  border-radius: 50%;\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);\n}\n\n#add-button-img:hover {\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1), 0 4px 6px rgba(0, 0, 0, 0.08);\n}\n\n#add-button-img:active {\n  transform: translateY(5px);\n  box-shadow: 0 5px 7px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.08);\n}\n\n\n/* NOTES  */\n.note-container{\n  width: 100%;\n  height: 90vh;\n  /* display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(50px, 30%)); */\n  display: flex;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  align-content: flex-start;\n  padding: 25px;\n  gap: 15px;\n  overflow-y: auto;\n}\n\n.note-grid{\n  display: flex;\n  flex-direction: column;\n  background-color: var(--background-grey);\n  padding: 5px;\n  transition: all 0.3s ease; /* Transition for smooth animation */\n  border-radius: 5px;\n  width: 250px;\n  overflow-y: auto; /* Enable vertical scrollbar when content exceeds max-height */\n  min-height: 150px; /* Minimum height of the container */\n  max-height: none; /* Maximum height of the container */\n\n}\n\n@keyframes pop {\n  0% {\n      transform: scale(1);\n  }\n  50% {\n      transform: scale(1.05);\n  }\n  100% {\n      transform: scale(1);\n  }\n}\n\n.note-grid:hover{\n  box-shadow: 2px 2px 10px grey; /* Add a subtle focus shadow */\n  animation: pop 0.3s ease-in-out;\n}\n\n.note-grid textarea{\n  border: none;\n  background-color: var(--background-grey);\n  width: 100%;\n\n  resize: None; /* Allow vertical resizing only */\n  box-sizing: border-box;\n  overflow: hidden;\n  box-sizing: border-box\n}\n\n.note-grid textarea:focus {\n  outline: none; /* Remove default outline */\n  border: 1px solid transparent; /* Make border transparent */\n}\n\n.note-grid button{\n  align-self: flex-end;\n  background-color: var(--background-grey);\n}\n\n.project-container {\n  margin-left: 5%;\n}\n\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\r\n  --font-color: #0c0a09;\r\n  --font-color-grey: #aaa;\r\n  --border-color: #222;\r\n  --primary-background: #fca5a5;\r\n  --background-light: #fef2f2;\r\n  --background-grey: #e7e5e4;\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\nhtml {\r\n  font-size: 62.5%;\r\n  line-height: 1.6;\r\n}\r\n\r\nbody {\r\n  font-size: 1.6rem;\r\n  color: var(--font-color);\r\n  background-attachment: fixed;\r\n  background-size: cover;\r\n}\r\n\r\nheader {\r\n  font-size: 2.4rem;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3 {\r\n  line-height: 1.2;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: var(--font-color);\r\n}\r\n\r\nimg {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\nbutton {\r\n  font-family: inherit;\r\n  color: inherit;\r\n  cursor: pointer;\r\n  border-style: none;\r\n  outline: none;\r\n}\r\n\r\n/* container */\r\n.container {\r\n  height: 100vh;\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  grid-template-rows: auto 1fr;\r\n}\r\n\r\n/* header */\r\n.header {\r\n  grid-column: 1/3;\r\n  grid-row: 1;\r\n  background-color: var(--primary-background);\r\n  border-bottom: 1px solid #d3d3d3;\r\n  padding: 15px;\r\n  color: white;\r\n  display: flex;\r\n}\r\n\r\n.header #notepad-icon {\r\n  height: 2.4em;\r\n  width: 2.4em;\r\n  margin-left: 0;\r\n}\r\n\r\n/* side bar */\r\n.side-bar, \r\n.dialog-side-bar {\r\n  grid-column: 1/2;\r\n  background-color: var(--background-grey);\r\n  border-right: 1px solid #d3d3d3;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  padding: 45px;\r\n  gap: 10px;\r\n}\r\n\r\n.dialog-side-bar button{\r\n  background: var(--background-grey);\r\n  font-size: 20px;\r\n  /* padding-left: 10%; */\r\n}\r\n\r\n.side-bar button, \r\n.dialog-side-bar button {\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  transition: transform 0.3s ease-in-out;\r\n}\r\n\r\n.side-bar button:hover, \r\n.dialog-side-bar button:hover {\r\n  transform: translateX(10px);\r\n  font-weight: bold;\r\n}\r\n\r\n.side-bar button .icon-img {\r\n  height: 30px;\r\n  width: 30px;\r\n}\r\n\r\n.date-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  width: 75%;\r\n}\r\n\r\n.counter {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 25px; /* Set to your desired size */\r\n  height: 25px; /* Set to your desired size */\r\n  margin-left: auto;\r\n  background-color: var(--primary-background);\r\n  border: 1px solid var(--primary-background);\r\n  border-radius: 50%;\r\n  color: white;\r\n  padding: 0; /* Remove padding to ensure the circle shape */\r\n  font-weight: bold;\r\n}\r\n\r\n.dialog-side-bar button .icon-img{\r\n  height: 25px;\r\n  width: 30px;\r\n}\r\n\r\n#form-dialog .dialog-container .dialog-content input[type=\'date\']{\r\n  color: green;\r\n  border:1px solid green;\r\n}\r\n\r\nform input#date{\r\n  color: green;\r\n  border:1px solid green;\r\n}\r\n\r\ninput[type="date"]::-webkit-calendar-picker-indicator {\r\n  filter: invert(26%) sepia(98%) saturate(1284%) hue-rotate(93deg) brightness(97%) contrast(107%);\r\n  /* Add other styling properties here as needed */\r\n}\r\n.date,\r\n.topic {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  gap: 10px;\r\n  width: 100%;\r\n}\r\n\r\n.topic {\r\n  margin-left: 10px;\r\n}\r\n\r\n.side-bar button {\r\n  font-size: 2.5rem;\r\n  background-color: var(--background-grey);\r\n}\r\n\r\n#add-button {\r\n  margin-top: auto;\r\n  width: 25%;\r\n}\r\n\r\n/* ADD modal */\r\ndialog {\r\n  width: 500px;\r\n  height: 325px;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  /* padding: 20px; */\r\n  border: none;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.dialog-container {\r\n  width: 500px;\r\n  height: 325px;\r\n  display: grid;\r\n  grid-template-columns: 1fr 3fr;\r\n  grid-template-rows: auto 1fr;\r\n}\r\n\r\n.dialog-header {\r\n  display: flex;\r\n  grid-column: 1/3;\r\n  grid-row: 1;\r\n  background-color: var(--primary-background);\r\n  padding: 10px;\r\n}\r\n\r\n.dialog-header #exit-button{\r\n  margin-left: auto;\r\n  background: var(--primary-background);\r\n}\r\n\r\n.dialog-side-bar {\r\n  grid-column: 1/2;\r\n  background-color: var(--background-grey);\r\n  border-right: 1px solid black;\r\n  padding: 10px;\r\n}\r\n\r\n.dialog-content button,\r\n.submit-button,\r\n#cancel-button {\r\n  font-size: 12px;\r\n  border: 1px solid green;\r\n  background-color: white;\r\n  padding: 5px;\r\n  border-radius: 10%;\r\n  color: green;\r\n  transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition for background color and text color */\r\n}\r\n\r\n.dialog-content button:hover {\r\n  color: white;\r\n  background-color: green;\r\n}\r\n\r\n\r\n\r\n.edit img:hover,\r\n.remove img:hover{\r\n  filter: invert(18%) sepia(97%) saturate(4130%) hue-rotate(110deg) brightness(97%) contrast(103%);\r\n}\r\n.dialog-content,\r\n#edit-dialog {\r\n  grid-column: 2/3;\r\n  padding: 10px;\r\n  height: fit-content;\r\n}\r\n\r\n#edit-dialog{\r\n  height: fit-content;\r\n}\r\n\r\n#desc,\r\n#title,\r\n#bottom-line {\r\n  width: 95%;\r\n  border-radius: 10px;\r\n}\r\n\r\n#desc,\r\n#title {\r\n  border: none;\r\n  outline: none;\r\n  padding: 5px;\r\n}\r\n\r\n#desc {\r\n  height: 150px;\r\n}\r\n\r\n#bottom-line {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\n#bottom-line .submit-button,\r\n#bottom-line #cancel-button {\r\n  margin-left: auto;\r\n}\r\n\r\ntextarea {\r\n  resize: none;\r\n}\r\n\r\n#form-priority {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n/* Hide default radio buttons */\r\n#form-priority input[type="radio"] {\r\n  /* display: none; */\r\n}\r\n\r\n/* Style for labels */\r\n#form-priority label {\r\n  font-size: 12px;\r\n  display: inline-block;\r\n  padding: 2px 2px;\r\n  border: 1px solid #000000;\r\n  border-radius: 4px;\r\n  background-color: #ffffff;\r\n  color: #000000;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n/* Style for checked labels */\r\n/* #form-priority input[type="radio"]:checked + label {\r\n  background-color: #000000;\r\n  color: #ffffff;\r\n} */\r\n\r\n/* Style for hovered labels */\r\n\r\n#form-priority .radio-label#Low:hover{\r\n  background-color: green;\r\n  color: white;\r\n}\r\n\r\n/* Specific styles for each priority level */\r\n\r\n/* High priority */\r\n#form-priority #High {\r\n  border-color: red;\r\n  color: red;\r\n}\r\n\r\n#form-priority input[type="radio"]#High:checked + label {\r\n  background-color: red;\r\n  color: #ffffff;\r\n}\r\n\r\n#form-priority .radio-label#High:hover {\r\n  background-color: red;\r\n  color: #ffffff;\r\n}\r\n\r\n/* Medium priority */\r\n#form-priority #Medium {\r\n  border-color: orange;\r\n  color: orange;\r\n}\r\n\r\n#form-priority input[type="radio"]#Medium:checked + label{\r\n  background-color: orange;\r\n  color: #ffffff;\r\n}\r\n\r\n#form-priority .radio-label#Medium:hover {\r\n  background-color: orange;\r\n  color: #ffffff;\r\n}\r\n\r\n/* Low priority */\r\n#form-priority #Low {\r\n  border-color: green;\r\n  color: green;\r\n}\r\n\r\n#form-priority input[type="radio"]#Low:checked + label {\r\n  background-color: green;\r\n  color: #ffffff;\r\n}\r\n\r\n/* Detail Dialog */\r\n#detail-dialog {\r\n  padding: 10px;\r\n  background-color: var(--background-grey);\r\n  height: fit-content;\r\n}\r\n/* content */\r\n#content {\r\n  background: #fef2f2;\r\n  grid-column: 2/3;\r\n}\r\n\r\n.grid-container {\r\n  display: grid;\r\n  grid-template-rows: 1fr;\r\n  font-size: 16px;\r\n  gap: 10px;\r\n  margin: 25px;\r\n}\r\n\r\n/* todo div stack */\r\n.grid {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n  background-color: var(--background-grey);\r\n  border-left-color: green;\r\n  border-radius: 5px;\r\n  border: 1px solid #d3d3d3;\r\n  border-left: 5px solid;\r\n  padding: 5px;\r\n  transition: box-shadow 0.3s ease; /* Smooth transition */\r\n}\r\n\r\n.grid:hover {\r\n  box-shadow: 5px 10px 30px #847f7f;\r\n}\r\n\r\n.grid button {\r\n  background-color: var(--background-grey);\r\n}\r\n\r\n.detail {\r\n  border: 1px solid green;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  color: green;\r\n  transition: background-color 0.3s ease, color 0.3s ease; /* Smooth transition for background color and text color */\r\n}\r\n\r\n.detail:hover {\r\n  color: white;\r\n  background-color: green;\r\n}\r\n\r\n#_title {\r\n  margin-right: auto;\r\n}\r\n\r\n#_dueDate {\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 70px;\r\n}\r\n\r\n\r\n.grid img {\r\n  width: 20px;\r\n  height: 20px;\r\n  align-self: center;\r\n}\r\n\r\n#add-button-img {\r\n  width: 100%;\r\n  background-color: var(--primary-background);\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n#add-button-img:hover {\r\n  box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1), 0 4px 6px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n#add-button-img:active {\r\n  transform: translateY(5px);\r\n  box-shadow: 0 5px 7px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n\r\n/* NOTES  */\r\n.note-container{\r\n  width: 100%;\r\n  height: 90vh;\r\n  /* display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(50px, 30%)); */\r\n  display: flex;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  align-content: flex-start;\r\n  padding: 25px;\r\n  gap: 15px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.note-grid{\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--background-grey);\r\n  padding: 5px;\r\n  transition: all 0.3s ease; /* Transition for smooth animation */\r\n  border-radius: 5px;\r\n  width: 250px;\r\n  overflow-y: auto; /* Enable vertical scrollbar when content exceeds max-height */\r\n  min-height: 150px; /* Minimum height of the container */\r\n  max-height: none; /* Maximum height of the container */\r\n\r\n}\r\n\r\n@keyframes pop {\r\n  0% {\r\n      transform: scale(1);\r\n  }\r\n  50% {\r\n      transform: scale(1.05);\r\n  }\r\n  100% {\r\n      transform: scale(1);\r\n  }\r\n}\r\n\r\n.note-grid:hover{\r\n  box-shadow: 2px 2px 10px grey; /* Add a subtle focus shadow */\r\n  animation: pop 0.3s ease-in-out;\r\n}\r\n\r\n.note-grid textarea{\r\n  border: none;\r\n  background-color: var(--background-grey);\r\n  width: 100%;\r\n\r\n  resize: None; /* Allow vertical resizing only */\r\n  box-sizing: border-box;\r\n  overflow: hidden;\r\n  box-sizing: border-box\r\n}\r\n\r\n.note-grid textarea:focus {\r\n  outline: none; /* Remove default outline */\r\n  border: 1px solid transparent; /* Make border transparent */\r\n}\r\n\r\n.note-grid button{\r\n  align-self: flex-end;\r\n  background-color: var(--background-grey);\r\n}\r\n\r\n.project-container {\r\n  margin-left: 5%;\r\n}\r\n\r\n\r\n'],sourceRoot:""}]);const d=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(a[c]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],d=0;d<e.length;d++){var c=e[d],s=r.base?c[0]+r.base:c[0],l=i[s]||0,u="".concat(s," ").concat(l);i[s]=l+1;var A=n(u),g={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(g);else{var m=o(g,r);r.byIndex=d,t.splice(d,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var d=n(i[a]);t[d].references--}for(var c=r(e,o),s=0;s<i.length;s++){var l=n(i[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},64:(e,t,n)=>{var r=n(72),o=n.n(r),i=n(825),a=n.n(i),d=n(659),c=n.n(d),s=n(56),l=n.n(s),u=n(540),A=n.n(u),g=n(113),m=n.n(g),p=n(208),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=A(),o()(p.A,h),p.A&&p.A.locals&&p.A.locals;class f{constructor(e,t,n,r,o="home"){this._title=e,this._description=t,this._dueDate=n,this._priority=r,this._project=o}get title(){return this._title}get description(){return this._description}get dueDate(){return this._dueDate}get priority(){return this._priority}get project(){return this._project}set title(e){this._title=e}set description(e){this._description=e}set dueDate(e){this._dueDate=e}set priority(e){this._priority=e}}const b=(()=>{const e=[];return{getArray:()=>e,addToArray:(t,n,r,o,i)=>{const a=new f(t,n,r,o,i);e.push(a)},remove:t=>{e.splice(t,1)},clearAll:()=>{for(;e.length>0;)e.pop()}}})();class C{constructor(e,t){this._title=e,this._description=t}get title(){return this._title}get description(){return this._description}set title(e){this._title=e}set description(e){this._description=e}}const E=(()=>{const e=[];return{getArray:()=>e,addToArray:(t,n)=>{const r=new C(t,n);e.push(r)},remove:t=>{e.splice(t,1)},clearAll:()=>{for(;e.length>0;)e.pop()}}})(),y=n.p+"c1e190d210e1b85bd404.svg",x=n.p+"dd24bbbe3273721a8eee.svg";Math.pow(10,8);const B=6048e5,w=864e5,v=6e4,k=36e5;function S(e,t){const n=t?.additionalDigits??2,r=function(e){const t={},n=e.split(D.dateTimeDelimiter);let r;if(n.length>2)return t;if(/:/.test(n[0])?r=n[0]:(t.date=n[0],r=n[1],D.timeZoneDelimiter.test(t.date)&&(t.date=e.split(D.timeZoneDelimiter)[0],r=e.substr(t.date.length,e.length))),r){const e=D.timezone.exec(r);e?(t.time=r.replace(e[1],""),t.timezone=e[1]):t.time=r}return t}(e);let o;if(r.date){const e=function(e,t){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};const o=r[1]?parseInt(r[1]):null,i=r[2]?parseInt(r[2]):null;return{year:null===i?o:100*i,restDateString:e.slice((r[1]||r[2]).length)}}(r.date,n);o=function(e,t){if(null===t)return new Date(NaN);const n=e.match(M);if(!n)return new Date(NaN);const r=!!n[4],o=T(n[1]),i=T(n[2])-1,a=T(n[3]),d=T(n[4]),c=T(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,d,c)?function(e,t,n){const r=new Date(0);r.setUTCFullYear(e,0,4);const o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,d,c):new Date(NaN);{const e=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(N[t]||(W(e)?29:28))}(t,i,a)&&function(e,t){return t>=1&&t<=(W(e)?366:365)}(t,o)?(e.setUTCFullYear(t,i,Math.max(o,a)),e):new Date(NaN)}}(e.restDateString,e.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);const i=o.getTime();let a,d=0;if(r.time&&(d=function(e){const t=e.match(Y);if(!t)return NaN;const n=q(t[1]),r=q(t[2]),o=q(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*k+r*v+1e3*o:NaN}(r.time),isNaN(d)))return new Date(NaN);if(!r.timezone){const e=new Date(i+d),t=new Date(0);return t.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),t.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),t}return a=function(e){if("Z"===e)return 0;const t=e.match(L);if(!t)return 0;const n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*k+o*v):NaN}(r.timezone),isNaN(a)?new Date(NaN):new Date(i+d+a)}const D={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},M=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Y=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,L=/^([+-])(\d{2})(?::?(\d{2}))?$/;function T(e){return e?parseInt(e):1}function q(e){return e&&parseFloat(e.replace(",","."))||0}const N=[31,null,31,30,31,30,31,31,30,31,30,31];function W(e){return e%400==0||e%4==0&&e%100!=0}function P(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function z(e){if(!(t=e,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof e))return!1;var t;const n=P(e);return!isNaN(Number(n))}const j={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function H(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const O={date:H({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:H({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:H({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function F(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,o=n?.width?String(n.width):t;r=e.formattingValues[o]||e.formattingValues[t]}else{const t=e.defaultWidth,o=n?.width?String(n.width):e.defaultWidth;r=e.values[o]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const X={ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:F({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:F({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:F({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:F({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:F({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function _(e){return(t,n={})=>{const r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],i=t.match(o);if(!i)return null;const a=i[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(a))return t}(d):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(a))return t}(d);let s;return s=e.valueCallback?e.valueCallback(c):c,s=n.valueCallback?n.valueCallback(s):s,{value:s,rest:t.slice(a.length)}}}const Z={ordinalNumber:(G={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match(G.matchPattern);if(!n)return null;const r=n[0],o=e.match(G.parsePattern);if(!o)return null;let i=G.valueCallback?G.valueCallback(o[0]):o[0];return i=t.valueCallback?t.valueCallback(i):i,{value:i,rest:e.slice(r.length)}}),era:_({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:_({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:_({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:_({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:_({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var G;const U={code:"en-US",formatDistance:(e,t,n)=>{let r;const o=j[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:O,formatRelative:(e,t,n,r)=>I[e],localize:X,match:Z,options:{weekStartsOn:0,firstWeekContainsDate:1}};let $={};function J(){return $}function R(e){const t=P(e);return t.setHours(0,0,0,0),t}function Q(e){const t=P(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n}function V(e,t){const n=R(e),r=R(t),o=+n-Q(n),i=+r-Q(r);return Math.round((o-i)/w)}function K(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}function ee(e){const t=P(e);return V(t,function(e){const t=P(e),n=K(e,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}function te(e,t){const n=J(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=P(e),i=o.getDay(),a=(i<r?7:0)+i-r;return o.setDate(o.getDate()-a),o.setHours(0,0,0,0),o}function ne(e){return te(e,{weekStartsOn:1})}function re(e){const t=P(e),n=t.getFullYear(),r=K(e,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const o=ne(r),i=K(e,0);i.setFullYear(n,0,4),i.setHours(0,0,0,0);const a=ne(i);return t.getTime()>=o.getTime()?n+1:t.getTime()>=a.getTime()?n:n-1}function oe(e){const t=P(e),n=+ne(t)-+function(e){const t=re(e),n=K(e,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),ne(n)}(t);return Math.round(n/B)+1}function ie(e,t){const n=P(e),r=n.getFullYear(),o=J(),i=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,a=K(e,0);a.setFullYear(r+1,0,i),a.setHours(0,0,0,0);const d=te(a,t),c=K(e,0);c.setFullYear(r,0,i),c.setHours(0,0,0,0);const s=te(c,t);return n.getTime()>=d.getTime()?r+1:n.getTime()>=s.getTime()?r:r-1}function ae(e,t){const n=P(e),r=+te(n,t)-+function(e,t){const n=J(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=ie(e,t),i=K(e,0);return i.setFullYear(o,0,r),i.setHours(0,0,0,0),te(i,t)}(n,t);return Math.round(r/B)+1}function de(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}const ce={y(e,t){const n=e.getFullYear(),r=n>0?n:1-n;return de("yy"===t?r%100:r,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):de(n+1,2)},d:(e,t)=>de(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>de(e.getHours()%12||12,t.length),H:(e,t)=>de(e.getHours(),t.length),m:(e,t)=>de(e.getMinutes(),t.length),s:(e,t)=>de(e.getSeconds(),t.length),S(e,t){const n=t.length,r=e.getMilliseconds();return de(Math.trunc(r*Math.pow(10,n-3)),t.length)}},se={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return ce.y(e,t)},Y:function(e,t,n,r){const o=ie(e,r),i=o>0?o:1-o;return"YY"===t?de(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):de(i,t.length)},R:function(e,t){return de(re(e),t.length)},u:function(e,t){return de(e.getFullYear(),t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return de(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return de(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return ce.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return de(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const o=ae(e,r);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):de(o,t.length)},I:function(e,t,n){const r=oe(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):de(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):ce.d(e,t)},D:function(e,t,n){const r=ee(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):de(r,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const o=e.getDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return de(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const o=e.getDay(),i=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return de(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return de(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let o;switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let o;switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return ce.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):ce.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):de(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):de(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):ce.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):ce.s(e,t)},S:function(e,t){return ce.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return ue(r);case"XXXX":case"XX":return Ae(r);default:return Ae(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return ue(r);case"xxxx":case"xx":return Ae(r);default:return Ae(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+le(r,":");default:return"GMT"+Ae(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+le(r,":");default:return"GMT"+Ae(r,":")}},t:function(e,t,n){return de(Math.trunc(e.getTime()/1e3),t.length)},T:function(e,t,n){return de(e.getTime(),t.length)}};function le(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),o=Math.trunc(r/60),i=r%60;return 0===i?n+String(o):n+String(o)+t+de(i,2)}function ue(e,t){return e%60==0?(e>0?"-":"+")+de(Math.abs(e)/60,2):Ae(e,t)}function Ae(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+de(Math.trunc(r/60),2)+t+de(r%60,2)}const ge=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},me=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},pe={p:me,P:(e,t)=>{const n=e.match(/(P+)(p+)?/)||[],r=n[1],o=n[2];if(!o)return ge(e,t);let i;switch(r){case"P":i=t.dateTime({width:"short"});break;case"PP":i=t.dateTime({width:"medium"});break;case"PPP":i=t.dateTime({width:"long"});break;default:i=t.dateTime({width:"full"})}return i.replace("{{date}}",ge(r,t)).replace("{{time}}",me(o,t))}},he=/^D+$/,fe=/^Y+$/,be=["D","DD","YY","YYYY"],Ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ee=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ye=/^'([^]*?)'?$/,xe=/''/g,Be=/[a-zA-Z]/;function we(e,t,n){const r=J(),o=n?.locale??r.locale??U,i=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,a=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,d=P(e);if(!z(d))throw new RangeError("Invalid time value");let c=t.match(Ee).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,pe[t])(e,o.formatLong):e})).join("").match(Ce).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:ve(e)};if(se[t])return{isToken:!0,value:e};if(t.match(Be))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));o.localize.preprocessor&&(c=o.localize.preprocessor(d,c));const s={firstWeekContainsDate:i,weekStartsOn:a,locale:o};return c.map((r=>{if(!r.isToken)return r.value;const i=r.value;return(!n?.useAdditionalWeekYearTokens&&function(e){return fe.test(e)}(i)||!n?.useAdditionalDayOfYearTokens&&function(e){return he.test(e)}(i))&&function(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),be.includes(e))throw new RangeError(r)}(i,t,String(e)),(0,se[i[0]])(d,i,o.localize,s)})).join("")}function ve(e){const t=e.match(ye);return t?t[1].replace(xe,"'"):e}function ke(){(()=>{const e=document.querySelectorAll(".detail"),t=document.querySelectorAll(".edit"),n=document.querySelectorAll(".remove");e.forEach((e=>{e.addEventListener("click",(t=>{t.stopPropagation(),function(e){let t=b.getArray(),n=e.getAttribute("index");const r=document.createElement("dialog");r.id="detail-dialog";let o="Invalid date";try{const e=S(t[n].dueDate);o=z(e)?we(e,"MMMM do, yyyy",{locale:U}):"Invalid date",r.innerHTML=Se(t[n].title,t[n].priority,o,t[n].description)}catch(e){console.error("Error parsing date:",e),r.innerHTML=Se("Empty Task","Low by Default","Invalid date","Empty Description")}document.body.appendChild(r),r.addEventListener("click",(e=>{const t=r.getBoundingClientRect();e.clientX>=t.left&&e.clientX<=t.right&&e.clientY>=t.top&&e.clientY<=t.bottom||(r.close(),r.remove())})),r.showModal()}(e.parentNode)}))})),t.forEach((e=>{e.addEventListener("click",(t=>{t.stopPropagation(),function(e){!function(e){const t=document.createElement("dialog");t.setAttribute("id","edit-dialog");const n=document.createElement("div");n.classList.add("dialog-content");const r=document.createElement("form");r.setAttribute("method","dialog");const o=document.createElement("label");o.setAttribute("for","title");const i=document.createElement("input");i.value=`${e.title}`,i.setAttribute("type","text"),i.setAttribute("id","title"),i.setAttribute("name","title"),i.setAttribute("placeholder","Title: Pay bills"),i.setAttribute("required","true");const a=document.createElement("label");a.setAttribute("for","desc");const d=document.createElement("textarea");d.textContent=`${e.description}`,d.setAttribute("id","desc"),d.setAttribute("name","desc"),d.setAttribute("placeholder","Details: e.g. internet, phone, rent."),d.setAttribute("required","true");const c=document.createElement("label");c.setAttribute("for","date"),c.textContent="Due Date: ";const s=document.createElement("input");s.value=e.dueDate,s.setAttribute("type","date"),s.setAttribute("id","date"),s.setAttribute("name","date"),s.setAttribute("required","true");const l=document.createElement("div");l.textContent="Priority:",l.id="form-priority",l.name="priority";const u=m("Low","Low","Low",e.priority),A=m("Medium","Medium","Medium",e.priority),g=m("High","High","High",e.priority);function m(e,t,n,r){const o=document.createElement("div"),i=document.createElement("label");i.classList.add("radio-label"),i.setAttribute("id",e);const a=document.createElement("input");a.setAttribute("type","radio"),a.setAttribute("id",e),a.setAttribute("name","priority"),a.setAttribute("value",t),r===t&&(a.checked=!0);const d=document.createTextNode(n);return o.appendChild(i),o.appendChild(a),i.appendChild(d),o}l.appendChild(u),l.appendChild(A),l.appendChild(g);const p=document.createElement("button");p.classList.add("submit-button"),p.id="edit-submit-button",p.textContent="Update To-Do",r.appendChild(o),r.appendChild(i),r.appendChild(a),r.appendChild(d),r.appendChild(c),r.appendChild(s);const h=document.createElement("div");h.id="bottom-line",h.appendChild(l),h.appendChild(p),r.appendChild(h),r.appendChild(n),t.appendChild(r),document.body.appendChild(t),t.showModal(),r.addEventListener("submit",(n=>{n.preventDefault(),function(e){const t=document.querySelector("#edit-dialog"),n=t.querySelector("form"),r=t.querySelector("#form-priority").querySelector('input[name="priority"]:checked'),o=new FormData(n);e.title=o.get("title"),e.description=o.get("desc"),e.dueDate=o.get("date"),e.priority=r.id,localStorage.setItem("todo",JSON.stringify(b.getArray()));const i=document.querySelector(".side-bar").querySelector(".clicked");Ne(void 0,i?i.id:void 0)}(e),t.remove(),t.close()}))}(b.getArray()[e.getAttribute("index")]);const t=document.querySelector("#edit-dialog");document.querySelector("#edit-submit-button"),t.addEventListener("click",(e=>{const n=t.getBoundingClientRect();e.clientX>=n.left&&e.clientX<=n.right&&e.clientY>=n.top&&e.clientY<=n.bottom||(t.close(),t.remove())}))}(e.parentNode)}))})),n.forEach((e=>{e.addEventListener("click",(t=>{t.stopPropagation(),function(e){const t=e.getAttribute("index");b.remove(t),localStorage.setItem("todo",JSON.stringify(b.getArray()));const n=document.querySelector(".side-bar").querySelector(".clicked");Ne(void 0,n?n.id:void 0)}(e.parentNode)}))}))})()}function Se(e,t,n,r){return`\n        <form method="dialog">\n            <h1>${e}</h1>\n            <h3>Priority: </h3><p>${t}</p>\n            <h3>Due Date:</h3><p>${n}</p>\n            <h3>Details:</h3><p>${r}</p>\n        </form>\n    `}function De(e,t){const n=P(e),r=P(t),o=Me(n,r),i=Math.abs(V(n,r));n.setDate(n.getDate()-o*i);const a=o*(i-Number(Me(n,r)===-o));return 0===a?0:a}function Me(e,t){const n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}const Ye=n.p+"3140919037b5281d614a.png",Le=n.p+"f815217425a86aead7a9.svg";function Te(e=!0,t="home"){const n=document.getElementById("content");n.textContent="",n.appendChild(function(){const e=document.createElement("div");return e.classList.add("note-container"),E.getArray().forEach(((t,n)=>{const r=document.createElement("div");r.classList.add("note-grid"),r.setAttribute("id",`note-grid-${n}`),r.setAttribute("index",n),function(e,t,n){const r=document.createElement("button");r.setAttribute("id","exit-button"),r.textContent="X",r.addEventListener("click",(function(){E.remove(n),e.remove(),localStorage.setItem("note",JSON.stringify(E.getArray()))})),e.appendChild(r);for(const r in t){const o=document.createElement("textarea");o.setAttribute("id",`textarea-${r}-${n}`),o.classList.add(`textarea-class-${r}-${n}`),o.value=t[r],e.appendChild(o),o.addEventListener("input",(function(){this.style.height="auto",this.style.height=this.scrollHeight+"px",document.getElementById(`note-grid-${n}`).style.height=this.style.height+"px"}))}}(r,t,n),e.appendChild(r)})),e}())}function qe(e,t){if(1==e)return!0;const n=De(S(t),new Date);if("today"===e){if(0==n)return!0}else{if("week"!==e)return!1;if(n<=7&&n>0)return!0}}function Ne(e=!0,t="home"){const n=document.getElementById("content");n.textContent="",n.appendChild(function(e=!0,t="home"){const n=document.createElement("div");return n.classList.add("grid-container"),document.querySelector("#add-button-img").src=Ye,document.querySelector("#notepad-icon").src=Le,b.getArray().forEach(((r,o)=>{const i=document.createElement("div");i.classList.add("grid"),i.setAttribute("index",o),function(e,t){const{checkbox:n,label:r,detailButton:o,editButton:i,removeButton:a}=function(){const e=document.createElement("button");e.textContent="Detail",e.className="detail";const t=document.createElement("button");t.className="edit";const n=document.createElement("img");n.src=`${x}`,n.alt="edit",t.appendChild(n);const r=document.createElement("button");r.className="remove";const o=document.createElement("img");o.src=`${y}`,o.alt="trashcan",r.appendChild(o);const i=document.createElement("input");i.type="checkbox",i.id="myCheckbox",i.name="myCheckbox",i.value="isChecked";const a=document.createElement("label");return a.htmlFor="myCheckbox",{checkbox:i,label:a,detailButton:e,editButton:t,removeButton:r}}();e.appendChild(r),e.appendChild(n);for(const n in t)if("_description"!==n&&"_priority"!==n&&"_project"!==n&&Object.prototype.hasOwnProperty.call(t,n)){"_dueDate"==n&&e.appendChild(o);const r=document.createElement("div");if(r.setAttribute("id",`${n}`),"_dueDate"===n)try{const e=S(t[n]);if(z(e)){const t=we(e,"MMM do",{locale:U});r.textContent=`${t}`}else r.textContent="Invalid date"}catch(e){r.textContent="Error parsing date"}else r.textContent=`${t[n]}`;e.appendChild(r)}e.style.borderLeftColor="High"==t.priority?"red":"Medium"==t.priority?"orange":"green",e.appendChild(i),e.appendChild(a)}(i,r),"home"===t||"today"===t||"week"===t?qe(e,r.dueDate)&&n.appendChild(i):qe(e,r.dueDate)&&t===r.project&&n.appendChild(i)})),n}(e,t)),ke(),function(){const e=document.querySelector("#home-container"),t=document.querySelector("#today-container"),n=document.querySelector("#week-container"),r=b.getArray();let o=0,i=0,a=0;const d=new Date;for(const e of r){o+=1;const t=De(S(e.dueDate),d);0===t&&(i+=1),t<=7&&t>=0&&(a+=1)}function c(e,t){let n=e.querySelector(".counter");!n&&t>0&&(n=document.createElement("div"),n.classList.add("counter"),e.appendChild(n)),n&&(t>0?n.textContent=t:n.remove())}c(e,o),c(t,i),c(n,a)}()}const We=n.p+"9c1f91ad127bce407e8d.png";function Pe(e){const t=document.querySelector(".project-container"),n=document.querySelectorAll(".side-bar-button"),r=document.createElement("button");r.textContent=e,r.setAttribute("id",e),r.classList.add("project"),t.appendChild(r),r.addEventListener("click",(function(){n.forEach((e=>e.classList.remove("active"))),Ne(!0,e),ze(),r.classList.add("active")}))}function ze(){!function(){if(document.getElementById("form-dialog"))return;const e=document.createElement("dialog");e.setAttribute("id","form-dialog");const t=document.createElement("form");t.setAttribute("method","dialog");const n=document.createElement("div");n.classList.add("dialog-container");const r=document.createElement("div");r.classList.add("dialog-header");const o=document.createElement("h1");o.textContent="Create a new...",r.appendChild(o);const i=document.createElement("button");i.setAttribute("id","exit-button"),i.textContent="X",i.addEventListener("click",(function(){e.open&&e.close()})),r.appendChild(i);const a=document.createElement("div");a.classList.add("dialog-side-bar");const d=document.createElement("button");d.textContent="ToDo",d.classList.add("clicked"),a.appendChild(d);const c=document.createElement("button");c.textContent="Project",a.appendChild(c);const s=document.createElement("button");s.textContent="Note",a.appendChild(s),a.querySelectorAll("button").forEach((e=>{e.addEventListener("click",(function(){if(a.querySelectorAll("button").forEach((e=>{e.classList.remove("clicked");const t=e.querySelector("img");t&&t.remove()})),this.classList.toggle("clicked"),!this.querySelector("img")){const e=document.createElement("img");e.classList.add("icon-img"),e.src=We,e.alt="Vertical lines",this.appendChild(e)}}))}));const l=document.createElement("div");l.classList.add("dialog-content"),l.replaceChildren(),je(e,t,n,l,r,a),d.addEventListener("click",(()=>{for(;t.firstChild;)t.removeChild(t.firstChild);je(e,t,n,l,r,a)})),s.addEventListener("click",(()=>{for(;t.firstChild;)t.removeChild(t.firstChild);!function(e,t,n,r,o,i){const a=document.createElement("div"),d=document.createElement("label");d.setAttribute("for","title");const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("id","title"),c.setAttribute("placeholder","Title: Pay bills"),c.setAttribute("name","title"),c.required=!0,a.appendChild(d),a.appendChild(c);const s=document.createElement("div"),l=document.createElement("label");l.setAttribute("for","desc");const u=document.createElement("textarea");u.setAttribute("id","desc"),u.setAttribute("name","desc"),u.setAttribute("placeholder","Details: e.g. internet, phone, rent."),u.required=!0,s.appendChild(l),s.appendChild(u);const A=document.createElement("button");A.classList.add("submit-button"),A.setAttribute("id","submit-button"),A.setAttribute("name","note"),A.textContent="Add Note",t.appendChild(a),t.appendChild(s),t.appendChild(A),r.appendChild(t),n.appendChild(o),n.appendChild(i),n.appendChild(r),e.appendChild(n),document.body.appendChild(e),He()}(e,t,n,l,r,a)})),c.addEventListener("click",(()=>{for(;t.firstChild;)t.removeChild(t.firstChild);!function(e,t,n,r,o,i){const a=document.createElement("div"),d=document.createElement("label");d.setAttribute("for","title");const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("id","title"),c.setAttribute("placeholder","Title: Pay bills"),c.setAttribute("name","title"),c.required=!0,a.appendChild(d),a.appendChild(c);const s=document.createElement("button");s.classList.add("submit-button"),s.setAttribute("id","submit-button"),s.setAttribute("name","note"),s.textContent="Create Project",t.appendChild(a),t.appendChild(s),r.appendChild(t),n.appendChild(o),n.appendChild(i),n.appendChild(r),e.appendChild(n),document.body.appendChild(e),He()}(e,t,n,l,r,a)}))}(),document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("form-dialog"),t=document.getElementById("add-button");document.querySelector("#submit-button"),t.addEventListener("click",(()=>{e.open||e.showModal()}));const n=document.querySelector(".side-bar"),r=document.querySelector("#home"),o=document.createElement("img");o.classList.add("icon-img"),o.src=We,o.alt="Vertical lines",r.appendChild(o),n.querySelectorAll("button").forEach((e=>{"add-button"!==e.id&&e.addEventListener("click",(function(){if(n.querySelectorAll("button").forEach((e=>{if("add-button"!==e.id){e.classList.remove("clicked");const t=e.querySelector("img");t&&t.remove()}})),this.classList.toggle("clicked"),!this.querySelector("img")){const e=document.createElement("img");e.classList.add("icon-img"),e.src=We,e.alt="Vertical lines",this.appendChild(e)}}))}))}))}function je(e,t,n,r,o,i){const a=document.createElement("div"),d=document.createElement("label");d.setAttribute("for","title");const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("id","title"),c.setAttribute("placeholder","Title: Pay bills"),c.setAttribute("name","title"),c.required=!0,a.appendChild(d),a.appendChild(c);const s=document.createElement("div"),l=document.createElement("label");l.setAttribute("for","desc");const u=document.createElement("textarea");u.setAttribute("id","desc"),u.setAttribute("name","desc"),u.setAttribute("placeholder","Details: e.g. internet, phone, rent."),u.required=!0,s.appendChild(l),s.appendChild(u);const A=document.createElement("div"),g=document.createElement("label");g.setAttribute("for","date"),g.textContent="Due Date:";const m=document.createElement("input");m.setAttribute("type","date"),m.setAttribute("id","date"),m.setAttribute("name","date"),m.required=!0,A.appendChild(g),A.appendChild(m);const p=document.createElement("div");p.setAttribute("id","bottom-line");const h=document.createElement("div");h.setAttribute("id","form-priority"),h.textContent="Priority: ",[{id:"Low",value:"Low",text:"Low"},{id:"Medium",value:"Medium",text:"Medium"},{id:"High",value:"High",text:"High"}].forEach((e=>{const t=document.createElement("div"),n=document.createElement("label");n.classList.add("radio-label"),n.setAttribute("id",e.id),n.textContent=e.text;const r=document.createElement("input");r.setAttribute("type","radio"),r.setAttribute("id",e.id),r.setAttribute("name","priority"),r.setAttribute("value",e.value),r.required=!0,t.appendChild(r),t.appendChild(n),h.appendChild(t)}));const f=document.createElement("button");f.classList.add("submit-button"),f.setAttribute("id","submit-button"),f.setAttribute("name","todo"),f.textContent="Add To Do",p.appendChild(h),p.appendChild(f),t.appendChild(a),t.appendChild(s),t.appendChild(A),t.appendChild(p),r.appendChild(t),n.appendChild(o),n.appendChild(i),n.appendChild(r),e.appendChild(n),document.body.appendChild(e),He()}function He(){const e=document.getElementById("form-dialog");document.querySelector("#submit-button").addEventListener("click",(t=>{t.preventDefault(),function(){const e=document.querySelector("dialog"),t=document.querySelector("form");let n=null;if(e.querySelector("#form-priority")){const t=e.querySelector("#form-priority").querySelector('input[name="priority"]:checked');t&&(n=t.id)}const r=document.querySelector(".project-container").querySelector(".clicked"),o=new FormData(t),i=o.get("title"),a=o.get("desc"),d=o.get("date");!d&&!n&&i&&a&&(E.addToArray(i,a),localStorage.setItem("note",JSON.stringify(E.getArray()))),d&&n&&i&&a&&(r?(b.addToArray(i,a,d,n,r.id),localStorage.setItem("todo",JSON.stringify(b.getArray()))):(b.addToArray(i,a,d,n),localStorage.setItem("todo",JSON.stringify(b.getArray())))),d||n||a||!i||Pe(i)}(),document.querySelector("form").reset(),e.close();const n=document.querySelector(".side-bar"),r=n.querySelector(".clicked");r?"notes-button"===r.id?Te():Ne(void 0,r.id):Ne(void 0,void 0),n.querySelectorAll("button").forEach((e=>{"add-button"!==e.id&&e.addEventListener("click",(function(){if(n.querySelectorAll("button").forEach((e=>{if("add-button"!==e.id){e.classList.remove("clicked");const t=e.querySelector("img");t&&t.remove()}})),this.classList.toggle("clicked"),!this.querySelector("img")){const e=document.createElement("img");e.classList.add("icon-img"),e.src=We,e.alt="Vertical lines",this.appendChild(e)}}))}))})),e.addEventListener("click",(t=>{const n=e.getBoundingClientRect();t.clientX>=n.left&&t.clientX<=n.right&&t.clientY>=n.top&&t.clientY<=n.bottom||e.close()}))}function Oe(){Ne(!0),ze()}!function(){let e=localStorage.getItem("todo")?JSON.parse(localStorage.getItem("todo")):[];b.clearAll(),e.forEach((e=>{const t=e._title,n=e._description,r=e._dueDate,o=e._priority,i=e._project;b.addToArray(t,n,r,o,i)})),localStorage.setItem("todo",JSON.stringify(b.getArray()));let t=localStorage.getItem("note")?JSON.parse(localStorage.getItem("note")):[];E.clearAll(),t.forEach((e=>{const t=e._title,n=e._description;E.addToArray(t,n)})),localStorage.setItem("note",JSON.stringify(E.getArray()))}(),0===JSON.parse(localStorage.getItem("todo")).length&&(b.addToArray("Complete Project","Finish the Project task","2024-06-06","Low"),b.addToArray("Grocery Shopping","Buy groceries for the week","2024-06-08","Medium"),b.addToArray("Doctor Appointment","Visit Dr. Smith for a check-up","2024-06-10","High"),b.addToArray("Read Book",'Finish reading "Atomic Habits"',"2024-06-12","Low"),b.addToArray("Workout","Go to the gym for a workout session","2024-06-07","High","Gym")),0===JSON.parse(localStorage.getItem("note")).length&&(E.addToArray("Meeting Notes","Discuss project milestones and deadlines"),E.addToArray("Vacation Plan","Plan itinerary for the upcoming vacation"),E.addToArray("Recipe","Ingredients and steps for making a chocolate cake"),E.addToArray("Birthday Gift Ideas","List of potential gifts for John's birthday"),E.addToArray("Weekly Goals","Set and review goals for the upcoming week")),Pe("Gym"),Oe();const Ie=document.querySelectorAll(".side-bar-button"),Fe=document.querySelector("#home"),Xe=document.querySelector("#today"),_e=document.querySelector("#week"),Ze=document.querySelector("#notes-button");Fe.classList.add("active"),Fe.addEventListener("click",(function(){Ie.forEach((e=>e.classList.remove("active"))),Oe(),Fe.classList.add("active")})),Xe.addEventListener("click",(function(){Ie.forEach((e=>e.classList.remove("active"))),Ne("today"),ze(),Xe.classList.add("active")})),_e.addEventListener("click",(function(){Ie.forEach((e=>e.classList.remove("active"))),Ne("week"),ze(),_e.classList.add("active")})),Ze.addEventListener("click",(function(){Ie.forEach((e=>e.classList.remove("active"))),Te(),ze(),Ze.classList.add("active")}))}},e=>{e(e.s=64)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,